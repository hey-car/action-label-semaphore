name: Label Semaphore
branding:
  icon: arrow-right-circle
  color: gray-dark
description: |
  This action updates the img in remote repo with correct tag based on labeled pull request; scripts prevent duplicate labels on pull requests

inputs:
  debug-mode:
    description: Set to true for verbose execution when debugging
    required: false
    default: 'false'
  log-level:
    description: The log level to use for the execution
    required: false
    default: 'info'
  log-timestamped:
    description: Set to true in order to enable timestamps on log messages
    required: false
    default: 'true'
  github-token:
    description: The token to use for the GitHub API and to update the remote repository
    required: true
  pr-label:
    description: The label to use for the semaphore
    required: true
  argo-repo:
    description: The repository to update with the semaphore version
    required: true
  use-alpha-channel:
    description: Set to true to use the alpha channel for the semaphore
    required: false
    default: 'true'
  argo-revision-path:
    description: Yaml path value to update under argo-app-path
    required: true
  argo-app-path:
    description: The path to the file to update in the repository
    required: true
  desired-revision:
    description: The desired revision to deploy
    required: false

runs:
  using: 'composite'
  steps:
    - name: setup
      shell: bash
      id: setup
      run: |
        echo "scripts-path=${GITHUB_ACTION_PATH}" >>"${GITHUB_OUTPUT}"
    - name: Sync PR Environment
      if: github.event_name == 'pull_request' && github.event.action != 'closed' && github.event.action != 'labeled'  && github.event.action != 'unlabeled' && contains(github.event.pull_request.labels.*.name, inputs.pr-label)
      run: '${{ steps.setup.outputs.scripts-path }}/scripts/script.sh'
      shell: bash
      env:
        # Default conf
        DEBUG_MODE: ${{ inputs.debug-mode }}
        LOG_LEVEL: ${{ inputs.log-level }}
        LOG_TIMESTAMPED: ${{ inputs.log-timestamped }}
        PR_LABEL: ${{ inputs.pr-label }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        ARGO_REPO: ${{ inputs.argo-repo }}
        ARGO_APP_PATH: ${{ inputs.argo-app-path }}
        PR_USE_ALPHA_CHANNEL: ${{ inputs.use-alpha-channel }}
        ARGO_REVISION_PATH: ${{ inputs.argo-revision-path }}
        # Specific conf
        DESIRED_REVISION: ${{ inputs.desired-revision }}
        SEMAPHORE_ACTION: 'sync'
    - name: Deploy PR Environment
      if: github.event_name == 'pull_request' && github.event.action == 'labeled' && contains(github.event.pull_request.labels.*.name, inputs.pr-label)
      run: '${{ steps.setup.outputs.scripts-path }}/scripts/script.sh'
#      run: ${{ github.action_path }}/scripts/script.sh
      shell: bash
      env:
        # Default conf
        DEBUG_MODE: ${{ inputs.debug-mode }}
        LOG_LEVEL: ${{ inputs.log-level }}
        LOG_TIMESTAMPED: ${{ inputs.log-timestamped }}
        PR_LABEL: ${{ inputs.pr-label }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        ARGO_REPO: ${{ inputs.argo-repo }}
        ARGO_APP_PATH: ${{ inputs.argo-app-path }}
        PR_USE_ALPHA_CHANNEL: ${{ inputs.use-alpha-channel }}
        ARGO_REVISION_PATH: ${{ inputs.argo-revision-path }}
        # Specific conf
        DESIRED_REVISION: ${{ inputs.desired-revision }}
        SEMAPHORE_ACTION: 'publish'
    - name: Remove PR Environment
      if: github.event_name == 'pull_request' && ((github.event.action == 'unlabeled' && !contains(github.event.pull_request.labels.*.name, inputs.pr-label)) || (github.event.action == 'closed' && contains(github.event.pull_request.labels.*.name, inputs.pr-label)))
      run: '${{ steps.setup.outputs.scripts-path }}/scripts/script.sh'
#      run: ${{ github.action_path }}/scripts/script.sh
      shell: bash
      env:
        # Default conf
        DEBUG_MODE: ${{ inputs.debug-mode }}
        LOG_LEVEL: ${{ inputs.log-level }}
        LOG_TIMESTAMPED: ${{ inputs.log-timestamped }}
        PR_LABEL: ${{ inputs.pr-label }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        ARGO_REPO: ${{ inputs.argo-repo }}
        ARGO_APP_PATH: ${{ inputs.argo-app-path }}
        PR_USE_ALPHA_CHANNEL: ${{ inputs.use-alpha-channel }}
        ARGO_REVISION_PATH: ${{ inputs.argo-revision-path }}
        # Specific conf
        SEMAPHORE_ACTION: 'unpublish'
